# Generated by Django 4.2.3 on 2023-09-27 15:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import useraccounts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('soft_delete', models.BooleanField(default=False, verbose_name='Soft delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('image', models.FileField(blank=True, null=True, upload_to='profilepics/', verbose_name='Profile picture')),
                ('bio', models.CharField(blank=True, max_length=160, null=True, verbose_name='Bio')),
                ('user_slug', models.SlugField(default='c7a26eff47964cd48efea232407a39fa', verbose_name='slug')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Account',
                'verbose_name_plural': 'User Accounts',
                'ordering': ['-created_at', '-updated_at'],
            },
            bases=(models.Model, django.db.models.manager.Manager),
            managers=[
                ('objects', useraccounts.models.NotSoftDeleted()),
                ('objects_all', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soft_delete', models.BooleanField(default=False, verbose_name='Soft delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL, verbose_name='from_user')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to=settings.AUTH_USER_MODEL, verbose_name='to_user')),
            ],
            options={
                'verbose_name': 'Relation',
                'verbose_name_plural': 'Relations',
                'ordering': ['-created_at'],
            },
            bases=(models.Model, django.db.models.manager.Manager),
        ),
        migrations.CreateModel(
            name='DeletedRelation',
            fields=[
            ],
            options={
                'verbose_name': 'Deleted relation',
                'verbose_name_plural': 'Deleted relations',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('useraccounts.relation',),
            managers=[
                ('objects', useraccounts.models.SoftDeleted()),
            ],
        ),
        migrations.CreateModel(
            name='DeletedUserAccount',
            fields=[
            ],
            options={
                'verbose_name': 'Deleted user account',
                'verbose_name_plural': 'Deleted user accounts',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('useraccounts.useraccount',),
            managers=[
                ('objects', useraccounts.models.SoftDeleted()),
                ('objects_all', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
